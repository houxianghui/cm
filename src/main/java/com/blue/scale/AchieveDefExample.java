package com.blue.scale;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AchieveDefExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table achieve_def
     *
     * @ibatorgenerated Mon Jul 29 11:36:07 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table achieve_def
     *
     * @ibatorgenerated Mon Jul 29 11:36:07 CST 2013
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table achieve_def
     *
     * @ibatorgenerated Mon Jul 29 11:36:07 CST 2013
     */
    public AchieveDefExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table achieve_def
     *
     * @ibatorgenerated Mon Jul 29 11:36:07 CST 2013
     */
    protected AchieveDefExample(AchieveDefExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table achieve_def
     *
     * @ibatorgenerated Mon Jul 29 11:36:07 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table achieve_def
     *
     * @ibatorgenerated Mon Jul 29 11:36:07 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table achieve_def
     *
     * @ibatorgenerated Mon Jul 29 11:36:07 CST 2013
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table achieve_def
     *
     * @ibatorgenerated Mon Jul 29 11:36:07 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table achieve_def
     *
     * @ibatorgenerated Mon Jul 29 11:36:07 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table achieve_def
     *
     * @ibatorgenerated Mon Jul 29 11:36:07 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table achieve_def
     *
     * @ibatorgenerated Mon Jul 29 11:36:07 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table achieve_def
     *
     * @ibatorgenerated Mon Jul 29 11:36:07 CST 2013
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andAchieveIdIsNull() {
            addCriterion("ACHIEVE_ID is null");
            return this;
        }

        public Criteria andAchieveIdIsNotNull() {
            addCriterion("ACHIEVE_ID is not null");
            return this;
        }

        public Criteria andAchieveIdEqualTo(Integer value) {
            addCriterion("ACHIEVE_ID =", value, "achieveId");
            return this;
        }

        public Criteria andAchieveIdNotEqualTo(Integer value) {
            addCriterion("ACHIEVE_ID <>", value, "achieveId");
            return this;
        }

        public Criteria andAchieveIdGreaterThan(Integer value) {
            addCriterion("ACHIEVE_ID >", value, "achieveId");
            return this;
        }

        public Criteria andAchieveIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("ACHIEVE_ID >=", value, "achieveId");
            return this;
        }

        public Criteria andAchieveIdLessThan(Integer value) {
            addCriterion("ACHIEVE_ID <", value, "achieveId");
            return this;
        }

        public Criteria andAchieveIdLessThanOrEqualTo(Integer value) {
            addCriterion("ACHIEVE_ID <=", value, "achieveId");
            return this;
        }

        public Criteria andAchieveIdIn(List values) {
            addCriterion("ACHIEVE_ID in", values, "achieveId");
            return this;
        }

        public Criteria andAchieveIdNotIn(List values) {
            addCriterion("ACHIEVE_ID not in", values, "achieveId");
            return this;
        }

        public Criteria andAchieveIdBetween(Integer value1, Integer value2) {
            addCriterion("ACHIEVE_ID between", value1, value2, "achieveId");
            return this;
        }

        public Criteria andAchieveIdNotBetween(Integer value1, Integer value2) {
            addCriterion("ACHIEVE_ID not between", value1, value2, "achieveId");
            return this;
        }

        public Criteria andAchieveIsNull() {
            addCriterion("ACHIEVE is null");
            return this;
        }

        public Criteria andAchieveIsNotNull() {
            addCriterion("ACHIEVE is not null");
            return this;
        }

        public Criteria andAchieveEqualTo(String value) {
            addCriterion("ACHIEVE =", value, "achieve");
            return this;
        }

        public Criteria andAchieveNotEqualTo(String value) {
            addCriterion("ACHIEVE <>", value, "achieve");
            return this;
        }

        public Criteria andAchieveGreaterThan(String value) {
            addCriterion("ACHIEVE >", value, "achieve");
            return this;
        }

        public Criteria andAchieveGreaterThanOrEqualTo(String value) {
            addCriterion("ACHIEVE >=", value, "achieve");
            return this;
        }

        public Criteria andAchieveLessThan(String value) {
            addCriterion("ACHIEVE <", value, "achieve");
            return this;
        }

        public Criteria andAchieveLessThanOrEqualTo(String value) {
            addCriterion("ACHIEVE <=", value, "achieve");
            return this;
        }

        public Criteria andAchieveLike(String value) {
            addCriterion("ACHIEVE like", value, "achieve");
            return this;
        }

        public Criteria andAchieveNotLike(String value) {
            addCriterion("ACHIEVE not like", value, "achieve");
            return this;
        }

        public Criteria andAchieveIn(List values) {
            addCriterion("ACHIEVE in", values, "achieve");
            return this;
        }

        public Criteria andAchieveNotIn(List values) {
            addCriterion("ACHIEVE not in", values, "achieve");
            return this;
        }

        public Criteria andAchieveBetween(String value1, String value2) {
            addCriterion("ACHIEVE between", value1, value2, "achieve");
            return this;
        }

        public Criteria andAchieveNotBetween(String value1, String value2) {
            addCriterion("ACHIEVE not between", value1, value2, "achieve");
            return this;
        }

        public Criteria andCheckStyleIsNull() {
            addCriterion("CHECK_STYLE is null");
            return this;
        }

        public Criteria andCheckStyleIsNotNull() {
            addCriterion("CHECK_STYLE is not null");
            return this;
        }

        public Criteria andCheckStyleEqualTo(String value) {
            addCriterion("CHECK_STYLE =", value, "checkStyle");
            return this;
        }

        public Criteria andCheckStyleNotEqualTo(String value) {
            addCriterion("CHECK_STYLE <>", value, "checkStyle");
            return this;
        }

        public Criteria andCheckStyleGreaterThan(String value) {
            addCriterion("CHECK_STYLE >", value, "checkStyle");
            return this;
        }

        public Criteria andCheckStyleGreaterThanOrEqualTo(String value) {
            addCriterion("CHECK_STYLE >=", value, "checkStyle");
            return this;
        }

        public Criteria andCheckStyleLessThan(String value) {
            addCriterion("CHECK_STYLE <", value, "checkStyle");
            return this;
        }

        public Criteria andCheckStyleLessThanOrEqualTo(String value) {
            addCriterion("CHECK_STYLE <=", value, "checkStyle");
            return this;
        }

        public Criteria andCheckStyleLike(String value) {
            addCriterion("CHECK_STYLE like", value, "checkStyle");
            return this;
        }

        public Criteria andCheckStyleNotLike(String value) {
            addCriterion("CHECK_STYLE not like", value, "checkStyle");
            return this;
        }

        public Criteria andCheckStyleIn(List values) {
            addCriterion("CHECK_STYLE in", values, "checkStyle");
            return this;
        }

        public Criteria andCheckStyleNotIn(List values) {
            addCriterion("CHECK_STYLE not in", values, "checkStyle");
            return this;
        }

        public Criteria andCheckStyleBetween(String value1, String value2) {
            addCriterion("CHECK_STYLE between", value1, value2, "checkStyle");
            return this;
        }

        public Criteria andCheckStyleNotBetween(String value1, String value2) {
            addCriterion("CHECK_STYLE not between", value1, value2, "checkStyle");
            return this;
        }
    }
}