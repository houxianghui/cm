SET SESSION FOREIGN_KEY_CHECKS=0;

/* Drop Tables */

DROP TABLE IF EXISTS ACHIEVE_DEF;
DROP TABLE IF EXISTS ACTION_DEF;
DROP TABLE IF EXISTS BATCH_CHG;
DROP TABLE IF EXISTS CHANGE_DETAIL;
DROP TABLE IF EXISTS CHANGE_RECORD;
DROP TABLE IF EXISTS CHECK_ITEMS;
DROP TABLE IF EXISTS CODE_CHG;
DROP TABLE IF EXISTS DAILY_ACHIEVE;
DROP TABLE IF EXISTS DAILY_ISSUE;
DROP TABLE IF EXISTS DAILY_RECORD;
DROP TABLE IF EXISTS DATABASE_CHG;
DROP TABLE IF EXISTS DATA_CHG;
DROP TABLE IF EXISTS MAIL_CONFIG;
DROP TABLE IF EXISTS FUNCTION_DEF;
DROP TABLE IF EXISTS GRADE_DEFINE;
DROP TABLE IF EXISTS ISSUE_RECORD;
DROP TABLE IF EXISTS LX_INFO;
DROP TABLE IF EXISTS MAIN_PLAN_JOB;
DROP TABLE IF EXISTS MAIN_PROBLEM;
DROP TABLE IF EXISTS PROJECT_DISTRIBUTE;
DROP TABLE IF EXISTS MILE_STONE;
DROP TABLE IF EXISTS PARTICIPATE_LIST;
DROP TABLE IF EXISTS MODULE_DEF;
DROP TABLE IF EXISTS OTHER_DAILY;
DROP TABLE IF EXISTS PARAM_CHG;
DROP TABLE IF EXISTS PRODUCT_DEF;
DROP TABLE IF EXISTS PROGRAM_LIST;
DROP TABLE IF EXISTS PROJECT_CHG_RECORD;
DROP TABLE IF EXISTS PROJECT_FILES;
DROP TABLE IF EXISTS PROJECT_RELATION;
DROP TABLE IF EXISTS REQUIRE_CHANGES;
DROP TABLE IF EXISTS REVIEW_RECORD;
DROP TABLE IF EXISTS RISK_RECORD;
DROP TABLE IF EXISTS PROJECT_LIST;
DROP TABLE IF EXISTS REPORT_CHG;
DROP TABLE IF EXISTS ROLE_DEPART_AUTH;
DROP TABLE IF EXISTS SCALE_DEF;
DROP TABLE IF EXISTS SCORE_INFO;
DROP TABLE IF EXISTS SIGN_RECORD;
DROP TABLE IF EXISTS SUB_SYS_VERSION;
DROP TABLE IF EXISTS UPDATE_STEP;
DROP TABLE IF EXISTS VERSION_HIS;
DROP TABLE IF EXISTS WORK_DAILY;
DROP TABLE IF EXISTS WORK_DISTRIBUTE;
DROP TABLE IF EXISTS WORK_LIST;




/* Create Tables */

CREATE TABLE ACHIEVE_DEF
(
	ACHIEVE_ID INT NOT NULL AUTO_INCREMENT,
	ACHIEVE VARCHAR(250),
	CHECK_STYLE VARCHAR(250),
	PRIMARY KEY (ACHIEVE_ID)
);


CREATE TABLE ACTION_DEF
(
	ACTION_ID INT NOT NULL AUTO_INCREMENT,
	NAME VARCHAR(250),
	ACTION VARCHAR(250),
	COMMIT_LIMIT VARCHAR(250),
	PRIMARY KEY (ACTION_ID)
);


CREATE TABLE BATCH_CHG
(
	ID BIGINT NOT NULL AUTO_INCREMENT,
	VERSION_ID VARCHAR(20) NOT NULL,
	SUB_SYS VARCHAR(20),
	BATCH_NAME VARCHAR(100),
	CHG_TYPE VARCHAR(10),
	TRIGGER_TYPE VARCHAR(100),
	PRE_STEP VARCHAR(200),
	NEXT_STEP VARCHAR(200),
	PRIMARY KEY (ID)
);


CREATE TABLE CHANGE_DETAIL
(
	DETAIL_ID BIGINT NOT NULL AUTO_INCREMENT,
	RECORD_ID BIGINT NOT NULL,
	CHANGE_CONTENT VARCHAR(100),
	TYPE VARCHAR(20),
	MEMO VARCHAR(200),
	PRIMARY KEY (DETAIL_ID)
);


CREATE TABLE CHANGE_RECORD
(
	RECORD_ID INT NOT NULL AUTO_INCREMENT,
	PROJECT_ID VARCHAR(20) NOT NULL,
	-- PROJECT_ID-BG[00-99]
	CHANGE_ID INT(2) COMMENT 'PROJECT_ID-BG[00-99]',
	CHANGE_TITLE VARCHAR(50),
	CHANGE_TYPE VARCHAR(20),
	CHANGE_LEVEL VARCHAR(10),
	REASON VARCHAR(255),
	CONTENT VARCHAR(255),
	USER_ID CHAR(8),
	CHANGE_DATE CHAR(8),
	PRIMARY KEY (RECORD_ID)
);


CREATE TABLE CHECK_ITEMS
(
	CHECK_NO CHAR(2) NOT NULL,
	CHECK_NAME VARCHAR(50),
	MODULUS DECIMAL(5,2),
	IN_USE CHAR(1) NOT NULL,
	STAT CHAR(10),
	PRIMARY KEY (CHECK_NO)
);


CREATE TABLE CODE_CHG
(
	ID BIGINT NOT NULL AUTO_INCREMENT,
	FILE_NAME VARCHAR(200),
	CHG_TYPE VARCHAR(10),
	VERSION_ID VARCHAR(20) NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE DAILY_ACHIEVE
(
	ID INT NOT NULL AUTO_INCREMENT,
	DISTRIBUTE_ID INT NOT NULL,
	WORK_ID VARCHAR(8),
	WORK_DATE CHAR(8),
	USER_ID CHAR(8),
	ACHIEVEMENT VARCHAR(250),
	ACHIEVE_PERCENT CHAR(3),
	INPUT_DATE CHAR(8),
	PRIMARY KEY (ID)
);


CREATE TABLE DAILY_ISSUE
(
	ID INT NOT NULL AUTO_INCREMENT,
	DISTRIBUTE_ID INT NOT NULL,
	WORK_ID VARCHAR(8),
	WORK_DATE CHAR(8),
	USER_ID CHAR(8),
	ISSUE VARCHAR(250),
	ISSUE_PERCENT CHAR(3),
	INPUT_DATE CHAR(8),
	PRIMARY KEY (ID)
);


CREATE TABLE DAILY_RECORD
(
	RECORD_ID BIGINT NOT NULL AUTO_INCREMENT,
	ID INT NOT NULL,
	PROJECT_ID VARCHAR(20),
	-- D-dev
	-- S-sit
	-- U-uat
	-- P-prd
	STEP VARCHAR(10) COMMENT 'D-dev
S-sit
U-uat
P-prd',
	WORK_DATE CHAR(8),
	TASK_COST DECIMAL(5,2),
	USER_ID CHAR(8),
	INPUT_DATE CHAR(8),
	WORK_MEMO VARCHAR(250),
	WORK_ISSUE VARCHAR(250),
	INPUT_COST DECIMAL(5,2),
	-- Y=通过
	-- N=未处理
	-- R=拒绝
	CHECKED CHAR(1) COMMENT 'Y=通过
N=未处理
R=拒绝',
	CHECK_USER VARCHAR(8),
	CHECK_DATE CHAR(8),
	REFUSE_REASON VARCHAR(255),
	PRIMARY KEY (RECORD_ID)
);


CREATE TABLE DATABASE_CHG
(
	ID BIGINT NOT NULL AUTO_INCREMENT,
	VERSION_ID VARCHAR(20) NOT NULL,
	TABLE_NAME VARCHAR(50),
	COLUMN_NAME VARCHAR(50),
	SUB_SYS VARCHAR(20),
	CHG_TYPE VARCHAR(10),
	ORIGINL VARCHAR(1000),
	TARGET VARCHAR(100),
	PRIMARY KEY (ID)
);


CREATE TABLE DATA_CHG
(
	ID BIGINT NOT NULL AUTO_INCREMENT,
	SHELL_NAME VARCHAR(100),
	MEMO VARCHAR(200),
	VERSION_ID VARCHAR(20) NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE FUNCTION_DEF
(
	FUNCTION_ID INT NOT NULL AUTO_INCREMENT,
	CLASS_NAME VARCHAR(100),
	FUNCTION_NAME VARCHAR(100),
	MEMO VARCHAR(100),
	PRIMARY KEY (FUNCTION_ID)
);


CREATE TABLE GRADE_DEFINE
(
	CHECK_NO CHAR(2) NOT NULL,
	GRADE CHAR(1) NOT NULL,
	SCORE INT,
	LOWER_SCORE INT,
	MEMO VARCHAR(255),
	IN_USE CHAR(1) NOT NULL,
	PRIMARY KEY (CHECK_NO, GRADE)
);


CREATE TABLE ISSUE_RECORD
(
	ID INT NOT NULL AUTO_INCREMENT,
	PROJECT_ID VARCHAR(20) NOT NULL,
	-- Y-已完成
	-- N-进行中
	-- U-未分配
	-- D-删除
	-- P-暂停
	STAT CHAR(1) COMMENT 'Y-已完成
N-进行中
U-未分配
D-删除
P-暂停',
	USER_ID CHAR(8),
	MEMO VARCHAR(255),
	CHECK_USER CHAR(8),
	DISTRIBUTE_ID INT,
	PRIMARY KEY (ID)
);


CREATE TABLE LX_INFO
(
	LX_ID CHAR(8) NOT NULL,
	DEPART CHAR(8),
	NAME CHAR(8),
	PHONE CHAR(20),
	MOBILE CHAR(19),
	EMAIL CHAR(30),
	STUFF_ID CHAR(8),
	PRIMARY KEY (LX_ID)
);


CREATE TABLE MAIL_CONFIG
(
	FUNCTION_ID INT NOT NULL,
	ROLE_ID CHAR(8)
);


CREATE TABLE MAIN_PLAN_JOB
(
	PROJECT_ID VARCHAR(20) NOT NULL,
	USER_ID CHAR(8),
	IS_DOEN CHAR(1),
	INPUT_DATE CHAR(8),
	PRIMARY KEY (PROJECT_ID)
);


CREATE TABLE MAIN_PROBLEM
(
	ID INT NOT NULL AUTO_INCREMENT,
	CONTENT VARCHAR(250),
	PRIMARY KEY (ID)
);


CREATE TABLE MILE_STONE
(
	MILE_STONE_ID BIGINT NOT NULL AUTO_INCREMENT,
	PROJECT_ID VARCHAR(20) NOT NULL,
	STONE_NAME VARCHAR(40),
	END_DATE VARCHAR(8),
	MEMO VARCHAR(200),
	INPUT_USER CHAR(8),
	INPUT_DATE CHAR(8),
	PRIMARY KEY (MILE_STONE_ID)
);


CREATE TABLE MODULE_DEF
(
	MODULE_ID VARCHAR(10) NOT NULL,
	NAME VARCHAR(30),
	MANAGER_ID CHAR(8),
	VERSION VARCHAR(40),
	PRODUCT_CODE VARCHAR(30) NOT NULL,
	PRIMARY KEY (MODULE_ID)
);


CREATE TABLE OTHER_DAILY
(
	ID BIGINT(0) NOT NULL AUTO_INCREMENT,
	TYPE VARCHAR(10),
	WORK_DATE CHAR(8),
	COST DECIMAL(5,1),
	INFO VARCHAR(100),
	MEMO VARCHAR(250),
	INPUT_USER CHAR(8),
	INPUT_DATE CHAR(8),
	PRIMARY KEY (ID)
);


CREATE TABLE PARAM_CHG
(
	ID BIGINT NOT NULL AUTO_INCREMENT,
	SUB_SYS VARCHAR(20),
	PARENT_MENU VARCHAR(50),
	SUB_MENU VARCHAR(50),
	MEMO VARCHAR(100),
	CHG_TYPE VARCHAR(10),
	ORIGINL VARCHAR(1000),
	TARGET VARCHAR(100),
	VERSION_ID VARCHAR(20) NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE PARTICIPATE_LIST
(
	ID INT NOT NULL AUTO_INCREMENT,
	USER_ID CHAR(8),
	MODULE_ID VARCHAR(10) NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE PRODUCT_DEF
(
	PRODUCT_CODE VARCHAR(30) NOT NULL,
	NAME VARCHAR(60),
	MANAGER_ID CHAR(8),
	LATEST_VERSION VARCHAR(15),
	LAST_PRD_DATE CHAR(8),
	NEXT_PRD_DATE CHAR(8),
	MEMO VARCHAR(250),
	PRIMARY KEY (PRODUCT_CODE)
);


CREATE TABLE PROGRAM_LIST
(
	PROJECT_ID VARCHAR(20) NOT NULL,
	PROGRAM VARCHAR(255)
);


CREATE TABLE PROJECT_CHG_RECORD
(
	RECORD_ID BIGINT NOT NULL AUTO_INCREMENT,
	FIRE_DATE CHAR(8),
	FINISH_DATE CHAR(8),
	CHANGE_TYPE VARCHAR(4),
	FIRE_USER VARCHAR(40),
	VERSION_AFTER VARCHAR(15),
	OPER_USER VARCHAR(20),
	TARGET_VERSION VARCHAR(15),
	CHANGE_SEQ VARCHAR(20),
	MEMO VARCHAR(150),
	BASE_LINE VARCHAR(10),
	-- mps
	-- cps
	-- ...
	MODULE VARCHAR(10) COMMENT 'mps
cps
...',
	PRIMARY KEY (RECORD_ID)
);


CREATE TABLE PROJECT_DISTRIBUTE
(
	ID INT NOT NULL AUTO_INCREMENT,
	PROJECT_ID VARCHAR(20) NOT NULL,
	USER_ID CHAR(8) NOT NULL,
	-- D-dev
	-- S-sit
	-- U-uat
	-- P-prd
	STEP VARCHAR(10) NOT NULL COMMENT 'D-dev
S-sit
U-uat
P-prd',
	START_DATE CHAR(8) NOT NULL,
	END_DATE CHAR(8) NOT NULL,
	PERCENT INT NOT NULL,
	-- Y-完成
	-- N-进行中
	IS_DONE CHAR(1) NOT NULL COMMENT 'Y-完成
N-进行中',
	MEMO VARCHAR(255),
	FINAL_END_DATE CHAR(8),
	MILE_STONE_ID BIGINT NOT NULL,
	TASK_NAME VARCHAR(200),
	ACTION_ID INT,
	MODULE_ID VARCHAR(10) NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE PROJECT_FILES
(
	ID BIGINT NOT NULL AUTO_INCREMENT,
	PROJECT_ID VARCHAR(20) NOT NULL,
	FILE_NAME VARCHAR(100),
	FILE_SIZE INT,
	FILE_TYPE VARCHAR(10),
	CONTENT LONGBLOB,
	UPDATE_DATE CHAR(8),
	USER_ID CHAR(8),
	MEMO VARCHAR(100),
	VERSION_ID VARCHAR(20) NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE PROJECT_LIST
(
	PROJECT_ID VARCHAR(20) NOT NULL,
	PROJECT_NAME VARCHAR(40),
	-- Y-已完成
	-- N-进行中
	-- U-未分配
	-- D-删除
	-- P-暂停
	STAT CHAR(1) COMMENT 'Y-已完成
N-进行中
U-未分配
D-删除
P-暂停',
	USER_ID CHAR(9),
	MEMO VARCHAR(40),
	ISS_ID VARCHAR(200),
	-- 字段复用为是否有附件
	IS_IN_CONTRACT CHAR(1) COMMENT '字段复用为是否有附件',
	NEED_DEV CHAR(1),
	OWNING CHAR(1),
	-- A|产品研发类项目
	-- B|售前支持类项目
	-- C|合同实施类项目
	-- D|运营维护类项目
	PROJECT_CLASS CHAR(2) COMMENT 'A|产品研发类项目
B|售前支持类项目
C|合同实施类项目
D|运营维护类项目',
	PRIORITY INT,
	REQUIRE_MANAGER CHAR(8),
	PROJECT_MANAGER CHAR(8),
	TECH_MANAGER CHAR(8),
	SETUP_DATE CHAR(8),
	PLAN_START_DATE CHAR(8),
	PLAN_END_DATE CHAR(8),
	REAL_END_DATE CHAR(8),
	-- D-dev
	-- S-sit
	-- U-uat
	-- P-prd
	STEP VARCHAR(10) COMMENT 'D-dev
S-sit
U-uat
P-prd',
	SUB_SYS VARCHAR(50),
	VERSION_ID VARCHAR(20) NOT NULL,
	SCALE_ID INT NOT NULL,
	CHECKER CHAR(8),
	-- Y 是
	-- N 否
	MAIN_PLAN_DIS CHAR(1) COMMENT 'Y 是
N 否',
	PRODUCT_IDS VARCHAR(300),
	PLAN_COST DECIMAL(10,2),
	PRIMARY KEY (PROJECT_ID)
);


CREATE TABLE PROJECT_RELATION
(
	PROJECT_ID VARCHAR(20) NOT NULL,
	PRE_PROJECT VARCHAR(10)
);


CREATE TABLE REPORT_CHG
(
	ID BIGINT NOT NULL AUTO_INCREMENT,
	REPORT_NAME VARCHAR(100),
	SUB_SYS VARCHAR(20),
	CHG_TYPE VARCHAR(10),
	ORIGINL VARCHAR(1000),
	TARGET VARCHAR(100),
	LOCATION VARCHAR(200),
	VERSION_ID VARCHAR(20) NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE REQUIRE_CHANGES
(
	PROJECT_ID VARCHAR(20) NOT NULL,
	VERSION INT DEFAULT 0 NOT NULL,
	CONTENT VARCHAR(255),
	REASON VARCHAR(255),
	CHANGE_DATE CHAR(8),
	USER_ID CHAR(8),
	PRIMARY KEY (PROJECT_ID, VERSION)
);


CREATE TABLE REVIEW_RECORD
(
	ID BIGINT NOT NULL AUTO_INCREMENT,
	PROJECT_ID VARCHAR(20) NOT NULL,
	TITLE VARCHAR(50),
	CONTENT VARCHAR(250),
	USER_ID CHAR(9),
	INPUT_DATE CHAR(8),
	PRIMARY KEY (ID)
);


CREATE TABLE RISK_RECORD
(
	ID BIGINT NOT NULL AUTO_INCREMENT,
	PROJECT_ID VARCHAR(20) NOT NULL,
	RISK_NAME VARCHAR(50),
	-- MARKET 市场
	-- CUST 客户
	-- TECH 技术
	-- MANAGE 管理
	-- PEOPLE 人员
	RISK_TYPE VARCHAR(10) COMMENT 'MARKET 市场
CUST 客户
TECH 技术
MANAGE 管理
PEOPLE 人员',
	-- L  提示
	-- M 一般
	-- H 严重
	RISK_LV CHAR(1) COMMENT 'L  提示
M 一般
H 严重',
	USER_ID CHAR(8),
	INPUT_DATE CHAR(8),
	MEMO VARCHAR(150),
	-- 趋势上升、趋势平稳、趋势下降，关闭
	RISK_STATUS VARCHAR(10) COMMENT '趋势上升、趋势平稳、趋势下降，关闭',
	SOLUTION VARCHAR(200),
	SOLUTE_DATE CHAR(8),
	RISK_ID INT(2),
	PRIMARY KEY (ID)
);


CREATE TABLE ROLE_DEPART_AUTH
(
	ID BIGINT NOT NULL AUTO_INCREMENT,
	ROLE_ID CHAR(8),
	DEPART_ID VARCHAR(20),
	PRIMARY KEY (ID)
);


CREATE TABLE SCALE_DEF
(
	SCALE_ID INT NOT NULL AUTO_INCREMENT,
	SCALE_DESC VARCHAR(20),
	SCALE LONGTEXT,
	PRIMARY KEY (SCALE_ID)
);


CREATE TABLE SCORE_INFO
(
	PROJECT_ID VARCHAR(20) NOT NULL,
	-- Y-已完成
	-- N-进行中
	-- U-未分配
	-- D-删除
	-- P-暂停
	STAT CHAR(1) NOT NULL COMMENT 'Y-已完成
N-进行中
U-未分配
D-删除
P-暂停',
	USER_ID CHAR(8) NOT NULL,
	CHECK_NO CHAR(2) NOT NULL,
	GRADE CHAR(1),
	SCORE INT,
	CHECK_USER CHAR(8),
	DISTRIBUTE_ID INT,
	PRIMARY KEY (PROJECT_ID, STAT, USER_ID, CHECK_NO)
);


CREATE TABLE SIGN_RECORD
(
	USER_ID CHAR(8) NOT NULL,
	RECORD_DATE CHAR(8) NOT NULL,
	RECORD_TIME CHAR(6),
	RECORD_TYPE CHAR(1) NOT NULL,
	IS_MODIFIED CHAR(1),
	MODIFY_USER CHAR(8),
	PRIMARY KEY (USER_ID, RECORD_DATE, RECORD_TYPE)
);


CREATE TABLE SUB_SYS_VERSION
(
	ID BIGINT NOT NULL AUTO_INCREMENT,
	VERSION_ID VARCHAR(20) NOT NULL,
	SYS_NAME VARCHAR(10),
	PRE_VERSION VARCHAR(20),
	NEXT_VERSION VARCHAR(20),
	PRIMARY KEY (ID)
);


CREATE TABLE UPDATE_STEP
(
	ID BIGINT NOT NULL AUTO_INCREMENT,
	STEP INT,
	MEMO VARCHAR(250),
	VERSION_ID VARCHAR(20) NOT NULL,
	PRIMARY KEY (ID)
);


CREATE TABLE VERSION_HIS
(
	VERSION_ID VARCHAR(20) NOT NULL,
	PLAN_RELEASE_DATE CHAR(8) NOT NULL,
	IS_RELEASED CHAR(1),
	RELEASE_DATE CHAR(8),
	IS_CHECKED CHAR(1),
	INPUT_USER CHAR(8),
	INPUT_DATE CHAR(8),
	MEMO VARCHAR(100),
	PRIMARY KEY (VERSION_ID)
);


CREATE TABLE WORK_DAILY
(
	ID INT NOT NULL AUTO_INCREMENT,
	DISTRIBUTE_ID INT NOT NULL,
	WORK_ID VARCHAR(8),
	WORK_DATE CHAR(8),
	USER_ID CHAR(8),
	CONTENT VARCHAR(250),
	INPUT_DATE CHAR(8),
	PRIMARY KEY (ID)
);


CREATE TABLE WORK_DISTRIBUTE
(
	DISTRIBUTE_ID INT NOT NULL AUTO_INCREMENT,
	WORK_ID VARCHAR(8) NOT NULL,
	USER_ID CHAR(8),
	START_DATE CHAR(8),
	END_DATE CHAR(8),
	CONTENT VARCHAR(250),
	WORK_STATUS CHAR(1),
	INPUT_USER CHAR(8),
	INPUT_DATE CHAR(8),
	NOTIFY_DAY INT,
	PRIMARY KEY (DISTRIBUTE_ID)
);


CREATE TABLE WORK_LIST
(
	WORK_ID VARCHAR(8) NOT NULL,
	WORK_NAME VARCHAR(20),
	CONTENT VARCHAR(250),
	WORK_STATUS CHAR(1),
	START_DATE CHAR(8),
	END_DATE CHAR(8),
	INPUT_USER CHAR(8),
	INPUT_DATE CHAR(8),
	IS_MAIN CHAR(1),
	PRIMARY KEY (WORK_ID)
);



/* Create Foreign Keys */

ALTER TABLE MAIL_CONFIG
	ADD FOREIGN KEY (FUNCTION_ID)
	REFERENCES FUNCTION_DEF (FUNCTION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PROJECT_DISTRIBUTE
	ADD FOREIGN KEY (MILE_STONE_ID)
	REFERENCES MILE_STONE (MILE_STONE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PARTICIPATE_LIST
	ADD FOREIGN KEY (MODULE_ID)
	REFERENCES MODULE_DEF (MODULE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PROJECT_DISTRIBUTE
	ADD FOREIGN KEY (MODULE_ID)
	REFERENCES MODULE_DEF (MODULE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MODULE_DEF
	ADD FOREIGN KEY (PRODUCT_CODE)
	REFERENCES PRODUCT_DEF (PRODUCT_CODE)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE CHANGE_DETAIL
	ADD FOREIGN KEY (RECORD_ID)
	REFERENCES PROJECT_CHG_RECORD (RECORD_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE DAILY_RECORD
	ADD FOREIGN KEY (ID)
	REFERENCES PROJECT_DISTRIBUTE (ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE CHANGE_RECORD
	ADD FOREIGN KEY (PROJECT_ID)
	REFERENCES PROJECT_LIST (PROJECT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ISSUE_RECORD
	ADD FOREIGN KEY (PROJECT_ID)
	REFERENCES PROJECT_LIST (PROJECT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MAIN_PLAN_JOB
	ADD FOREIGN KEY (PROJECT_ID)
	REFERENCES PROJECT_LIST (PROJECT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MILE_STONE
	ADD FOREIGN KEY (PROJECT_ID)
	REFERENCES PROJECT_LIST (PROJECT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PROGRAM_LIST
	ADD FOREIGN KEY (PROJECT_ID)
	REFERENCES PROJECT_LIST (PROJECT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PROJECT_DISTRIBUTE
	ADD FOREIGN KEY (PROJECT_ID)
	REFERENCES PROJECT_LIST (PROJECT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PROJECT_FILES
	ADD FOREIGN KEY (PROJECT_ID)
	REFERENCES PROJECT_LIST (PROJECT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PROJECT_RELATION
	ADD FOREIGN KEY (PROJECT_ID)
	REFERENCES PROJECT_LIST (PROJECT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE REQUIRE_CHANGES
	ADD FOREIGN KEY (PROJECT_ID)
	REFERENCES PROJECT_LIST (PROJECT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE REVIEW_RECORD
	ADD FOREIGN KEY (PROJECT_ID)
	REFERENCES PROJECT_LIST (PROJECT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE RISK_RECORD
	ADD FOREIGN KEY (PROJECT_ID)
	REFERENCES PROJECT_LIST (PROJECT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PROJECT_LIST
	ADD FOREIGN KEY (SCALE_ID)
	REFERENCES SCALE_DEF (SCALE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE BATCH_CHG
	ADD FOREIGN KEY (VERSION_ID)
	REFERENCES VERSION_HIS (VERSION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE CODE_CHG
	ADD FOREIGN KEY (VERSION_ID)
	REFERENCES VERSION_HIS (VERSION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE DATABASE_CHG
	ADD FOREIGN KEY (VERSION_ID)
	REFERENCES VERSION_HIS (VERSION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE DATA_CHG
	ADD FOREIGN KEY (VERSION_ID)
	REFERENCES VERSION_HIS (VERSION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PARAM_CHG
	ADD FOREIGN KEY (VERSION_ID)
	REFERENCES VERSION_HIS (VERSION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PROJECT_FILES
	ADD FOREIGN KEY (VERSION_ID)
	REFERENCES VERSION_HIS (VERSION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PROJECT_LIST
	ADD FOREIGN KEY (VERSION_ID)
	REFERENCES VERSION_HIS (VERSION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE REPORT_CHG
	ADD FOREIGN KEY (VERSION_ID)
	REFERENCES VERSION_HIS (VERSION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE SUB_SYS_VERSION
	ADD FOREIGN KEY (VERSION_ID)
	REFERENCES VERSION_HIS (VERSION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE UPDATE_STEP
	ADD FOREIGN KEY (VERSION_ID)
	REFERENCES VERSION_HIS (VERSION_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE DAILY_ACHIEVE
	ADD FOREIGN KEY (DISTRIBUTE_ID)
	REFERENCES WORK_DISTRIBUTE (DISTRIBUTE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE DAILY_ISSUE
	ADD FOREIGN KEY (DISTRIBUTE_ID)
	REFERENCES WORK_DISTRIBUTE (DISTRIBUTE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE WORK_DAILY
	ADD FOREIGN KEY (DISTRIBUTE_ID)
	REFERENCES WORK_DISTRIBUTE (DISTRIBUTE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE WORK_DISTRIBUTE
	ADD FOREIGN KEY (WORK_ID)
	REFERENCES WORK_LIST (WORK_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



